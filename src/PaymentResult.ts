import ProcessedTransaction from "./ProcessedTransaction";

interface IPaymentResult {
    PaymentId?: string;
    PaymentRequestId?: string;
    Status?: string;
    QRUrl?: string,
    Transactions: ProcessedTransaction[];
    GatewayUrl?: string;
    CallbackUrl?: string;
    RedirectUrl?: string;
    ThreeDSAuthClientData?: string;
    TraceId?: string;
}

/**
 * Represtents payee transaction included in a payment transaction
 */
export default class PaymentResult {

    /**
     * The identifier of the newly initialized payment,
     * generated by the Barion system.
     */
    PaymentId: string = "";

    /**
     * The type of payment. Accepted values: Immediate,
     * Reservation, DelayedCapture
     */
    PaymentRequestId: string = "";

    /**
     * The status of the payment in the Barion system.
     * See more: https://docs.barion.com/PaymentStatus
     */
    Status: string = "";

    /**
     * URL for a QR code representing the payment.
     */
    QRUrl: string = "";

    /**
     * An array containing all transactions associated with the payment.
     */
    Transactions: ProcessedTransaction[] = [];

    /**
     * The URL of the Barion Smart Gateway (including the payment identifier),
     * where the API caller should redirect the payer.
     */
    GatewayUrl: string = "";

    /**
     * The URL (including the payment identifier) where the Barion system
     * will send a request to whenever there is a change in the state of the payment.
     */
    CallbackUrl: string = "";

    /**
     * The URL (including the payment identifier) where the payer gets
     * redirected to after the payment is completed or cancelled.
     */
    RedirectUrl: string = "";

    /**
     * Encrypted client authentication data required for 3D Secure processing.
     */
    ThreeDSAuthClientData: string = "";

    /**
     * A unique value generated by the card issuer to track a chain of
     * recurring or token payments that require 3D Secure authentication. 
     */
    TraceId: string = "";

    constructor(o?: IPaymentResult | any) {
         if (o) {
            this.PaymentId = o.PaymentId || "";
            this.PaymentRequestId = o.PaymentRequestId || "";
            this.Status = o.Status || "";
            this.QRUrl = o.QRUrl || "";
            if (o.Transactions) { 
                this.Transactions = o.Transactions
                    .map((t: unknown) => new ProcessedTransaction(t));
            }
            this.GatewayUrl = o.GatewayUrl || "";
            this.CallbackUrl = o.CallbackUrl || "";
            this.RedirectUrl = o.RedirectUrl || "";
            this.ThreeDSAuthClientData = o.ThreeDSAuthClientData || "";
            this.TraceId = o.TraceId || "";
         }
     }
}