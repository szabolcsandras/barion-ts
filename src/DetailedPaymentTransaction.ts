import Item from "./Item";
import UserInformation from "./UserInformation";

interface IDetailedPaymentTransaction {
    TransactionId?: string;
    POSTransactionId?: string;
    TransactionTime?: string;
    Total?: number;
    Currency?: string;
    Payer?: UserInformation;
    Payee?: UserInformation;
    Status?: string;
    Items?: Item[];
    RelatedId?: string;
}

export default class DetailedPaymentTransaction {

    /**
     * The unique identifier of the transaction
     * generated by the Barion system.
     */
    TransactionId: string = "";

    /**
     * The unique identifier of the transaction
     * at the shop that started the payment.
     */
    POSTransactionId: string = "";

    /**
     * The timestamp of the transaction.
     */
    TransactionTime: string = "";

    /**
     * The original amount of the transaction.
     */
    Total: number = 0;

    /**
     * The 3 character ISO 4217 currency code
     * of the transaction.
     */
    Currency: string = "";

    /**
     * The user that paid the transaction.
     */
    Payer: UserInformation = new UserInformation();

    /**
     * The user that received the money from the transaction.
     */
    Payee: UserInformation = new UserInformation();

    /**
     * The current status of the transaction. This is NOT the
     * same as the status of the payment itself.
     */
    Status: string = "";

    /**
     * The type of the transaction.
     */
    TransactionType: string = "";

    /**
     * The items included in the transaction.
     */
    Items: Item[] = [];

    /**
     * The identifier of the related transaction, if it exists.
     */
    RelatedId: string = "";

    constructor(o?: IDetailedPaymentTransaction | any) {
         if (o) {
            this.TransactionId = o.TransactionId || "";
            this.POSTransactionId = o.POSTransactionId || "";
            this.TransactionTime = o.TransactionTime || "";
            this.Total = o.Total || 0;
            this.Currency = o.Currency || "";
            if (o.Payer) {
                this.Payer = new UserInformation(o.Payer);
            }
            if (o.Payee) {
                this.Payee = new UserInformation(o.Payee);
            }
            this.Status = o.Status || "";
            this.TransactionType = o.TransactionType || "";
            if (o.Items) {
                this.Items = o.Items.map((t: unknown) => new Item(t));
            }
            this.RelatedId = o.RelatedId || "";
         }
     }
}